#!/bin/sh
die () {
    echo >&2 "$@"
    exit 1
}

#
# require argument
#   tmsu-tagd ./file [new_tag1, new_tag2=value, ...]
#
[ "$#" -gt 0 ] || die "At least 1 filename argument required, $# provided"


#
# resolved symbolic link
#
FILE=$(readlink -f $1)
[ -f "$FILE" ] || die "No such file $FILE"


#
# tempfile magic
#
DIALOG=${DIALOG=dialog}
tempfile=`tempfile 2>/dev/null` || tempfile=/tmp/test$$
trap "rm -f $tempfile" 0 1 2 5 15


#
# read tags and values
#
FILE_TAGS=$(tmsu tags $FILE|cut -d \  -sf 2-)
ALL_TAGS=$(tmsu tags)
ADD_TAGS=$(echo "$@"|cut -d \  -sf 2-)


#
# Collect all tags together
#   FILE_TAGS and ADD_TAGS are used twice to enable them later
#
COLLECT_TAGS="$(echo $ALL_TAGS $FILE_TAGS $FILE_TAGS $ADD_TAGS $ADD_TAGS|tr ' ' '\n'|sort)"
COLLECT_TAGS="dummy $COLLECT_TAGS"  # dummy helps 'cut -d -sf' command


#
# handle no tags at all
#
COLLECT_AMT=$(echo $COLLECT_TAGS|wc -w)
if [ "$COLLECT_AMT" -le 1 ];then
    echo "No tags found. Add some tags first."
    echo "$ tmsu-tagd ./file new_tag"
    exit 1
fi


#
# prepare checklist
#
CHECKS=""
F_TAG_I=2
while [ "$F_TAG_I" -le "$COLLECT_AMT" ]; do
    enabled=false
    CUR=$(echo $COLLECT_TAGS |cut -d \  -sf $F_TAG_I)
    NEXT=$(echo $COLLECT_TAGS |cut -d \  -sf $((($F_TAG_I + 1))))
    while [ "$CUR" == "$NEXT" ];do
        enabled=true
        ((F_TAG_I+=1))
        CUR=$(echo $COLLECT_TAGS |cut -d \  -sf $F_TAG_I)
        NEXT=$(echo $COLLECT_TAGS |cut -d \  -sf $((($F_TAG_I + 1))))
    done

    CHECKS+="$CUR "
    if $enabled ; then
        CHECKS+='"" on '
    else
        CHECKS+='"" off '
    fi
    ((F_TAG_I+=1))
done


#
# show dialog
#
$DIALOG --backtitle "Edit tags" \
	    --title     "Edit tags" \
        --clear \
        --checklist "$FILE" 70 100 32 \
        $CHECKS 2> $tempfile

retval=$?


#
# handle result
#
choice=`cat $tempfile`
case $retval in
  0)
    clear
    UNTAG_ALL="tmsu untag --all $FILE"
    RETAG="tmsu tag --tags \"${choice}\" $FILE||tmsu tag --tags \"$FILE_TAGS\" $FILE"
    echo "$UNTAG_ALL ; $RETAG"

    if [ "$FILE_TAGS" ]; then eval $UNTAG_ALL; fi
    if [ "$choice" ]; then eval $RETAG; fi
    ;;
  1)
    clear
    echo "Cancel pressed.";;
  255)
    clear
    echo "ESC pressed.";;
esac
